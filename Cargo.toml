[workspace]
members = [
    "client",
    "ui",
]

exclude = ["program"]

resolver = "2"

[workspace.package]
version = "0.1.0"
edition = "2021"

[workspace.dependencies]
async-process = "2.0.0"
async-recursion = "1.0.5"
async-std = "1.12.0"
borsh = "0.9"
chrono = { version = "0.4.31", features = ["serde"] }
clap = { version = "3.2", features = ["cargo", "env"] }
dioxus = "0.4.0"
dioxus-tui = "0.4.0"
futures = "0.3.29"
home = "0.5"
reqwest = { version = "0.11.22", features = ["json"] }
serde = { version = "1.0.190", features = ["derive"] }
serde_json = "1.0.108"
solana-client = { git = "https://github.com/solana-labs/solana.git", version = "=1.18.0" }
solana-sdk = { git = "https://github.com/solana-labs/solana.git", version = "=1.18.0" }
thiserror = "1"
yaml-rust = "0.4"

[patch.crates-io]
# We include the following crates as our dependencies above from crates.io:
#
#  * spl-associated-token-account
#  * spl-instruction-padding
#  * spl-memo
#  * spl-token
#  * spl-token-2022
#
# They, in turn, depend on a number of crates that we also include directly using `path`
# specifications.  For example, `spl-token` depends on `solana-program`.  And we explicitly specify
# `solana-program` above as a local path dependency:
#
#     solana-program = { path = "../../sdk/program", version = "=1.16.0" }
#
# Unfortunately, Cargo will try to resolve the `spl-token` `solana-program` dependency only using
# what is available on crates.io.  Crates.io normally contains a previous version of these crates,
# and we end up with two versions of `solana-program` and `solana-zk-token-sdk` and all of their
# dependencies in our build tree.
solana-program = { git = "https://github.com/solana-labs/solana.git", version = "=1.18.0" }
solana-zk-token-sdk = { git = "https://github.com/solana-labs/solana.git", version = "=1.18.0" }
